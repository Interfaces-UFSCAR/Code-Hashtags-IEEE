import pandas as pd, os
from graphlearning.ssl import laplace
from serialization import from_indexed_sparse, df_to_json

cooc_files_folder = 'hashtags\\'
for filename in os.listdir(cooc_files_folder):
    file_path = os.path.join(cooc_files_folder, filename)
    if os.path.isfile(file_path) and filename.endswith('_coocc.npz'):#data generated by collect_hashtags.py and processed by
        # remove_indef_from_cooc_matrix.py (also non-processed versions)
        try:
            with open(file_path, 'rb') as smat_buffer:
                s_cooc_mat, index, _ = from_indexed_sparse(smat_buffer)
            cat_df_path = f'hashtags\\hashtags_{filename.split("hashtags_", 1)[1].rsplit("_coocc.npz", 1)[0]}_classificado.xlsx'
            cat_df = pd.read_excel(cat_df_path, index_col=0)
            cat_df = cat_df[cat_df['categoria']!='Remover']
            print(f'Starting classification process with data from files: "{file_path}", "{cat_df_path}"')
            model = laplace(s_cooc_mat)
            present_tags = index.intersection(cat_df.index)
            if len(cat_df['categoria'].unique()) > 2:
                apoio_map = {'Pr贸-Lula':2, 'Pr贸-Bolsonaro':2, 'Indefinido':1, 
                            'Indefinido*':1, 'Anti-Lula':0, 'Anti-Bolsonaro':0}
                reverse_apoio_map = {0:'anti', 1:'indef', 2:'pro'}
            else:
                 apoio_map = {'Pr贸-Lula':1, 'Pr贸-Bolsonaro':1, 
                             'Anti-Lula':0, 'Anti-Bolsonaro':0}
                 reverse_apoio_map = {0:'anti', 1:'pro'}
            prob = model.fit(index.get_indexer(present_tags),
                             cat_df.loc[present_tags]['categoria']\
                                .map(apoio_map).dropna()
                            )
            prob_df = pd.DataFrame(prob, columns=list(reverse_apoio_map.values()), index=index)
            del s_cooc_mat, cat_df
            classified = prob_df.any(axis=1)
            prob_df['categoria'] = model.predict()
            prob_df['categoria'] = prob_df['categoria'].map(reverse_apoio_map)
            print(f'Classification done for file {file_path}, with the following results: ')
            print(f'Classified {(classified.sum() / len(prob_df)):.0%} of datapoints')
            prob_df = prob_df.loc[classified]
            print(f'Classification distribution of the {len(prob_df)} datapoints: ')
            print(prob_df['categoria'].value_counts(normalize=True).apply(lambda x:f'{x:.0%}'))
            ls_dir = 'hashtags\\label_spreading\\'
            if not os.path.exists(ls_dir):
                os.mkdir(ls_dir)
            ls_path = ls_dir+cat_df_path.split('hashtags\\', 1)[1]
            prob_df.to_csv(ls_path.replace('.xlsx', '_ls.csv'))
            cat_json = df_to_json(prob_df[['categoria']])
            with open(ls_path.replace('.xlsx', '_ls_cat.json'), mode='w') as json_file:
                print(cat_json.getvalue(), file=json_file)

        except Exception as e:
            print(f'The following exception occurred while processing data from the following files: "{file_path}", "{cat_df_path}"')
            raise e