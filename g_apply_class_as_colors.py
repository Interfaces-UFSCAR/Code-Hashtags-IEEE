import json, pandas as pd
from argparse import ArgumentParser
from corpus import ensure_path_exists

def main():
    parser = ArgumentParser(
      description="A script to apply the labels generated by the label spreading algorithm to the hashtag graphs, as colors, for visualization"
    )
    parser.add_argument(
      "--candidate",
      nargs=3,
      action="append",
      type=str,
      metavar=("input_path", "labeled_hashtags_file_path", "output_path"), 
      help="The input json graph followed by the labeled hashtags file (json), ending with the resulting json graph output"
    )
    args = parser.parse_args()
    for [input_file_name, labeled_hashtags_file_name, output_file_name] in args.candidate:
      with open(input_file_name) as graph_file:
          graph = json.load(graph_file)
          node_cats = pd.read_json(labeled_hashtags_file_name, 
                          orient='index')

      for node in graph['nodes']:
          try:
              cat = node_cats.loc[node['attributes']['label']]['categoria']
          except KeyError as e:
              cat = None

          if cat == 'indef':
              node['attributes']['color'] = 'rgb(170,170,170)'
          elif cat == 'anti':
              node['attributes']['color'] = 'rgb(185, 13, 220)'
          elif cat == 'pro':
              node['attributes']['color'] = 'rgb(44, 70, 149)'

      ensure_path_exists(output_file_name)
      with open(output_file_name, 'w') as colored_graph_file:
          json.dump(graph, colored_graph_file)

      print(f'Saved colorized graph file to "{output_file_name}"')

if __name__ == "__main__":
    main()